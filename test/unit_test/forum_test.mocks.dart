// Mocks generated by Mockito 5.4.4 from annotations
// in playforge/test/unit_test/forum_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:playforge/core/failure/failure.dart' as _i5;
import 'package:playforge/core/failure/post_failure.dart' as _i8;
import 'package:playforge/features/dashboard/domain/entity/comment_entity.dart'
    as _i9;
import 'package:playforge/features/dashboard/domain/entity/forum_entity.dart'
    as _i6;
import 'package:playforge/features/dashboard/domain/entity/game_entity.dart'
    as _i10;
import 'package:playforge/features/dashboard/domain/usecases/forum_usecase.dart'
    as _i3;
import 'package:playforge/features/dashboard/presentation/navigator/home_navigator.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ForumUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForumUseCase extends _i1.Mock implements _i3.ForumUseCase {
  MockForumUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addForumPost(
    _i6.ForumPostEntity? post,
    _i7.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addForumPost,
          [
            post,
            image,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addForumPost,
            [
              post,
              image,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>
      getAllForumPosts(
    int? page,
    String? sortOption,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getAllForumPosts,
              [
                page,
                sortOption,
              ],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ForumPostEntity>>(
              this,
              Invocation.method(
                #getAllForumPosts,
                [
                  page,
                  sortOption,
                ],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>
      getForumPost() => (super.noSuchMethod(
            Invocation.method(
              #getForumPost,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ForumPostEntity>>(
              this,
              Invocation.method(
                #getForumPost,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>);

  @override
  _i4.Future<
      _i2.Either<_i8.PostFailure, List<_i6.ForumPostEntity>>> searchAllPosts(
          String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchAllPosts,
          [searchTerm],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i8.PostFailure, List<_i6.ForumPostEntity>>>.value(
            _FakeEither_0<_i8.PostFailure, List<_i6.ForumPostEntity>>(
          this,
          Invocation.method(
            #searchAllPosts,
            [searchTerm],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i8.PostFailure, List<_i6.ForumPostEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity>> getPosts(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [userId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.ForumPostEntity>(
          this,
          Invocation.method(
            #getPosts,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> likePost(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [postId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #likePost,
            [postId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> dislikePost(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #dislikePost,
          [postId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #dislikePost,
            [postId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addComment(
    String? postId,
    _i9.AddCommentEntity? commentEntity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [
            postId,
            commentEntity,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addComment,
            [
              postId,
              commentEntity,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> editPost(
    String? postId,
    _i6.ForumPostEntity? updatedPostEntity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPost,
          [
            postId,
            updatedPostEntity,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #editPost,
            [
              postId,
              updatedPostEntity,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deletePost(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deletePost,
            [postId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> viewPost(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewPost,
          [postId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #viewPost,
            [postId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.GameEntity>>> searchGamesApi(
    String? query,
    String? category,
    String? sectionPageToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchGamesApi,
          [
            query,
            category,
            sectionPageToken,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i10.GameEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i10.GameEntity>>(
          this,
          Invocation.method(
            #searchGamesApi,
            [
              query,
              category,
              sectionPageToken,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.GameEntity>>>);
}

/// A class which mocks [HomeViewNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewNavigator extends _i1.Mock implements _i11.HomeViewNavigator {
  MockHomeViewNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void openPostDetailsView(String? postId) => super.noSuchMethod(
        Invocation.method(
          #openPostDetailsView,
          [postId],
        ),
        returnValueForMissingStub: null,
      );
}
