// Mocks generated by Mockito 5.4.4 from annotations
// in playforge/test/unit_test/forum_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:playforge/core/failure/failure.dart' as _i5;
import 'package:playforge/features/dashboard/domain/entity/forum_entity.dart'
    as _i6;
import 'package:playforge/features/dashboard/domain/usecases/forum_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ForumUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForumUseCase extends _i1.Mock implements _i3.ForumUseCase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addForumPost(
          _i6.ForumPostEntity? post) =>
      (super.noSuchMethod(
        Invocation.method(
          #addForumPost,
          [post],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addForumPost,
            [post],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addForumPost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>> getAllForumPosts(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForumPosts,
          [page],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ForumPostEntity>>(
          this,
          Invocation.method(
            #getAllForumPosts,
            [page],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ForumPostEntity>>(
          this,
          Invocation.method(
            #getAllForumPosts,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ForumPostEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity?>> getForumPost(
          String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForumPost,
          [postId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity?>>.value(
                _FakeEither_0<_i5.Failure, _i6.ForumPostEntity?>(
          this,
          Invocation.method(
            #getForumPost,
            [postId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity?>>.value(
                _FakeEither_0<_i5.Failure, _i6.ForumPostEntity?>(
          this,
          Invocation.method(
            #getForumPost,
            [postId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ForumPostEntity?>>);
}
