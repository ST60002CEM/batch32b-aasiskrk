// Mocks generated by Mockito 5.4.4 from annotations
// in playforge/test/unit_test/profile_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i8;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:playforge/core/failure/failure.dart' as _i6;
import 'package:playforge/core/shared_prefs/user_shared_prefs.dart' as _i9;
import 'package:playforge/features/profile/domain/entity/profile_entity.dart'
    as _i7;
import 'package:playforge/features/profile/domain/repository/profile_repository.dart'
    as _i2;
import 'package:playforge/features/profile/domain/usecases/profile_usecase.dart'
    as _i4;
import 'package:playforge/features/profile/presentation/navigator/profile_navigator.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProfileRepository_0 extends _i1.SmartFake
    implements _i2.IProfileRepository {
  _FakeIProfileRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProfileUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileUsecase extends _i1.Mock implements _i4.ProfileUsecase {
  MockProfileUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeIProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.IProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ProfileEntity>> getUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.ProfileEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.ProfileEntity>(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.ProfileEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> updateProfile(_i8.File? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [image],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #updateProfile,
            [image],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> updateUser(
          _i7.ProfileEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #updateUser,
            [user],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> deleteUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [userId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [userId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [UserSharedPrefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSharedPrefs extends _i1.Mock implements _i9.UserSharedPrefs {
  MockUserSharedPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> isDeviceSupported() => (super.noSuchMethod(
        Invocation.method(
          #isDeviceSupported,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> setUserToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserToken,
          [token],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #setUserToken,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String?>> getUserToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserToken,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String?>>.value(
            _FakeEither_1<_i6.Failure, String?>(
          this,
          Invocation.method(
            #getUserToken,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String?>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> deleteUserToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUserToken,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #deleteUserToken,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> setUserId(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [userId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #setUserId,
            [userId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String?>> getUserId() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String?>>.value(
            _FakeEither_1<_i6.Failure, String?>(
          this,
          Invocation.method(
            #getUserId,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String?>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> deleteUserId() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUserId,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #deleteUserId,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> setUserName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserName,
          [name],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #setUserName,
            [name],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String?>> getFullName() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFullName,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String?>>.value(
            _FakeEither_1<_i6.Failure, String?>(
          this,
          Invocation.method(
            #getFullName,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String?>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> setFingerprintEnabled(
          bool? isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFingerprintEnabled,
          [isEnabled],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #setFingerprintEnabled,
            [isEnabled],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> getFingerprintEnabled() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFingerprintEnabled,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #getFingerprintEnabled,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> authenticateWithFingerprint() =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateWithFingerprint,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #authenticateWithFingerprint,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> loginWithFingerprint() =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithFingerprint,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #loginWithFingerprint,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [ProfileViewNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileViewNavigator extends _i1.Mock
    implements _i10.ProfileViewNavigator {
  MockProfileViewNavigator() {
    _i1.throwOnMissingStub(this);
  }
}
