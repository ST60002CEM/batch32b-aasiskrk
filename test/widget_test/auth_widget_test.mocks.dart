// Mocks generated by Mockito 5.4.4 from annotations
// in playforge/test/widget_test/auth_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:io' as _i10;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:playforge/features/auth/domain/entity/auth_entity.dart' as _i11;
import 'package:playforge/features/auth/domain/usecases/auth_usecase.dart'
    as _i2;
import 'package:playforge/features/auth/presentation/navigator/login_navigator.dart'
    as _i3;
import 'package:playforge/features/auth/presentation/navigator/register_navigator.dart'
    as _i4;
import 'package:playforge/features/auth/presentation/state/auth_state.dart'
    as _i6;
import 'package:playforge/features/auth/presentation/viewmodel/auth_view_model.dart'
    as _i7;
import 'package:playforge/features/dashboard/presentation/navigator/dashboard_navigator.dart'
    as _i5;
import 'package:state_notifier/state_notifier.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthUseCase_0 extends _i1.SmartFake implements _i2.AuthUseCase {
  _FakeAuthUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginViewNavigator_1 extends _i1.SmartFake
    implements _i3.LoginViewNavigator {
  _FakeLoginViewNavigator_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterViewNavigator_2 extends _i1.SmartFake
    implements _i4.RegisterViewNavigator {
  _FakeRegisterViewNavigator_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDashboardViewNavigator_3 extends _i1.SmartFake
    implements _i5.DashboardViewNavigator {
  _FakeDashboardViewNavigator_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_4 extends _i1.SmartFake implements _i6.AuthState {
  _FakeAuthState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthViewModel extends _i1.Mock implements _i7.AuthViewModel {
  MockAuthViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthUseCase get authUseCase => (super.noSuchMethod(
        Invocation.getter(#authUseCase),
        returnValue: _FakeAuthUseCase_0(
          this,
          Invocation.getter(#authUseCase),
        ),
      ) as _i2.AuthUseCase);

  @override
  _i3.LoginViewNavigator get lnavigator => (super.noSuchMethod(
        Invocation.getter(#lnavigator),
        returnValue: _FakeLoginViewNavigator_1(
          this,
          Invocation.getter(#lnavigator),
        ),
      ) as _i3.LoginViewNavigator);

  @override
  _i4.RegisterViewNavigator get rnavigator => (super.noSuchMethod(
        Invocation.getter(#rnavigator),
        returnValue: _FakeRegisterViewNavigator_2(
          this,
          Invocation.getter(#rnavigator),
        ),
      ) as _i4.RegisterViewNavigator);

  @override
  _i5.DashboardViewNavigator get dnavigator => (super.noSuchMethod(
        Invocation.getter(#dnavigator),
        returnValue: _FakeDashboardViewNavigator_3(
          this,
          Invocation.getter(#dnavigator),
        ),
      ) as _i5.DashboardViewNavigator);

  @override
  set onError(_i8.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<_i6.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i6.AuthState>.empty(),
      ) as _i9.Stream<_i6.AuthState>);

  @override
  _i6.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.AuthState);

  @override
  set state(_i6.AuthState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.AuthState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeAuthState_4(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i6.AuthState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> uploadImage(_i10.File? file) => (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [file],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> registerUser(_i11.AuthEntity? user) => (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [user],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> toggleFingerprint(bool? isEnabled) => (super.noSuchMethod(
        Invocation.method(
          #toggleFingerprint,
          [isEnabled],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> checkFingerprintStatus() => (super.noSuchMethod(
        Invocation.method(
          #checkFingerprintStatus,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> authenticateWithFingerprint() => (super.noSuchMethod(
        Invocation.method(
          #authenticateWithFingerprint,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void openRegisterView() => super.noSuchMethod(
        Invocation.method(
          #openRegisterView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openLoginView() => super.noSuchMethod(
        Invocation.method(
          #openLoginView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openDashboardView() => super.noSuchMethod(
        Invocation.method(
          #openDashboardView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openForgotPasswordView() => super.noSuchMethod(
        Invocation.method(
          #openForgotPasswordView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i6.AuthState? old,
    _i6.AuthState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.RemoveListener addListener(
    _i12.Listener<_i6.AuthState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i8.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
